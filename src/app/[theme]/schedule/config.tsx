export const ScheduleSampleOrder: Record<string, any> = [
    { 'path': 'schedule/overview', 'component': 'Overview', 'name': 'Overview', 'order': '01', 'category': 'Scheduler', 'api': '{"ScheduleComponent": [ "height", "eventSettings", "selectedDate", "cssClass" , "views", "timezone", "group", "resources", "dateHeaderTemplate" , "timeScale", "firstDayofWeek", "rowAutoHeight", "enableTooltip" ] }', 'description': 'This example demonstrates the overview of the Scheduler functionalities, designed to empower you with seamless scheduling solutions in the React application.',
        'sourceFiles': [
            { 'displayName': 'overview.tsx', 'path': '/nextjs/demos/src/schedule/overview/page.tsx' },
            { 'displayName': 'overview.css', 'path': '/nextjs/demos/src/schedule/overview/overview.css' }
        ] },
    { 'path': 'schedule/default', 'component': 'Default', 'name': 'Default Functionalities', 'order': '01', 'category': 'Scheduler', 'api': '{"ScheduleComponent": [ "height", "eventSettings", "selectedDate" ] }', 'description': 'This demo shows how the Scheduler control functionalities work with the default set of minimal configurations in a React application.' },
    { 'path': 'schedule/local-data', 'component': 'LocalData', 'name': 'Local Data', 'order': '02', 'category': 'Data Binding', 'api': '{"ScheduleComponent": [ "eventSettings", "selectedDate" ] }', 'description': 'This demo shows how to populate appointments in the React Scheduler through local data sources like JSON data types with the proper date format.' },
    { 'path': 'schedule/remote-data', 'component': 'RemoteData', 'name': 'Remote Data', 'order': '02', 'category': 'Data Binding', 'api': '{"ScheduleComponent": [ "eventSettings", "selectedDate" ] }', 'description': 'This demo shows how to populate appointments or events in the React Scheduler through remote data sources such as web services, web API, URL, and OData.' },
    { 'path': 'schedule/calendar-integration', 'component': 'CalendarIntegration', 'name': 'Sync Google Calendar', 'order': '02', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "eventSettings", "dataBinding","selectedDate" ] }', 'description': 'This example shows how to synchronously work with React Scheduler and Google Calendar by converting Scheduler events to the required format.' },
    { 'path': 'schedule/realtime-binding', 'component': 'RealTimeBinding', 'name': 'Real-Time Binding', 'order': '02', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "eventSettings", "dataBinding"] }', 'description': 'This demo showcases the way of binding signalR services to Scheduler component. Here, the SignalR is used to bind the data with Scheduler.' },
    { 'path': 'schedule/recurrence-events', 'component': 'RecurrenceEvents', 'name': 'Recurring Events', 'order': '03', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "width", "height", "currentView", "selectedDate", "eventSettings" ] }', 'description': 'This demo shows how to define recurring events (appointments) with different patterns and rules that meet iCalendar specifications in the React Scheduler.' },
    { 'path': 'schedule/block-events', 'component': 'BlockEvents', 'name': 'Blocking Dates and Time', 'order': '03', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "width", "height", "currentView", "selectedDate", "eventSettings","group","resources" ] }', 'description': 'This example shows how to block specific days or time intervals on the React Scheduler that helps to mark unavailable time or days in Calendar.' },
    { 'path': 'schedule/search-events', 'component': 'SearchEvents', 'name': 'Search Events', 'order': '03', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "height", "eventSettings", "selectedDate" ] }', 'description': 'This example shows how to filter the appointments or events of the React Scheduler based on a search string in a particular field or all fields.' },
    { 'path': 'schedule/timezone', 'component': 'TimeZone', 'name': 'Timezone', 'order': '03', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "timezone", "selectedDate", "eventSettings", "eventRendered" ] }', 'description': 'This demo shows how the React Scheduler works with different time zones. The events in the Scheduler automatically adapt to the selected time zone.' },
    { 'path': 'schedule/external-drag-drop', 'component': 'ExternalDragDrop', 'name': 'External Drag and Drop', 'order': '03', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "currentView", "eventSettings","resourceHeaderTemplate", "cssClass", "workHours", "views", "group", "resources", "actionBegin", "drag" ] }', 'description': 'This demo shows the ability to drag and drop appointments from an external source (such as the DataGrid, ListView, etc.)  into the React Scheduler.' },
    { 'path': 'schedule/multi-drag', 'component': 'MultiDrag', 'name': 'Multiple Events Drag', 'order': '03', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "currentView", "eventSettings", "allowMultiDrag", "cssClass", "views", "group", "resources" ] }', 'description': 'This demo explains you about the ability to select multiple appointments and drag them simultaneously.' },
    { 'path': 'schedule/inline-editing', 'component': 'InlineEditing', 'name': 'Inline Editing', 'order': '03', 'category': 'Appointments', 'api': '{"ScheduleComponent": [ "currentView", "eventSettings","group", "allowInline" ] }', 'description': 'The example showcases the inline mode of the React Scheduler that is used to create an appointment or edit an existing appointments subject easily and quickly.' },
    { 'path': 'schedule/custom-month-view', 'component': 'CustomMonthView', 'name': 'Custom Month View', 'order': '05', 'category': 'Views', 'api': '{"ScheduleComponent": [ "eventSettings", "views" ] }', 'description': 'This example showcases how to customize the starting week, number of weeks, and number of events displayed in a single row in the React Scheduler month view.' }
];
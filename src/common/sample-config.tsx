export const category: any = {"chart": {"overview":{"name":"Overview","category":"Charts"},"line":{"name":"Line","category":"Line Charts"},"spline":{"name":"Spline","category":"Line Charts"},"stepline":{"name":"Step Line","category":"Line Charts"},"area":{"name":"Area","category":"Area Charts"},"spline-area":{"name":"Spline Area","category":"Area Charts"},"steparea":{"name":"Step Area","category":"Area Charts"},"column":{"name":"Column","category":"Bar Charts"},"grouped-column":{"name":"Grouped Column","category":"Bar Charts"},"rounded-column":{"name":"Rounded Column","category":"Bar Charts"},"defaultSample":"chart/overview"},
"diagram": {"default-functionality":{"name":"Flow Chart","category":"Getting Started"},"shape-gallery":{"name":"Shapes","category":"Getting Started"},"getting-started-node":{"name":"Nodes","category":"Getting Started"},"custom-shapes":{"name":"HTML Shapes","category":"Getting Started"},"zoom-and-pan":{"name":"Zooming and Panning","category":"Interactive Features"},"scrolling":{"name":"Scrolling","category":"Interactive Features"},"drawing-tool":{"name":"Drawing Tools","category":"Interactive Features"},"hierarchical-model":{"name":"Hierarchical Tree","category":"Automatic Layouts"},"organization-model":{"name":"Organization Chart","category":"Automatic Layouts"},"radial-tree":{"name":"Radial Tree","category":"Automatic Layouts"},"defaultSample":"diagram/default-functionality"},
"document-editor": {"default":{"name":"Default Functionalities","category":"DocumentEditor"},"document-list":{"name":"Document List","category":"File Management"},"character-formatting":{"name":"Character Formatting","category":"Editing Features"},"paragraph-formatting":{"name":"Paragraph Formatting","category":"Editing Features"},"styles":{"name":"Styles","category":"Editing Features"},"bullets-and-numbering":{"name":"Bullets and Numbering","category":"Editing Features"},"links-and-bookmarks":{"name":"Hyperlinks and Bookmarks","category":"Editing Features"},"table-formatting":{"name":"Table Formatting","category":"Editing Features"},"section-formatting":{"name":"Section Formatting","category":"Editing Features"},"headers-and-footers":{"name":"Headers and Footers","category":"Editing Features"},"table-of-contents":{"name":"Table of Contents","category":"References"},"defaultSample":"document-editor/default"},
"gantt": {"overview":{"name":"Overview","category":"Gantt"},"default":{"name":"Default Functionalities","category":"Gantt"},"editing":{"name":"Editing","category":"Gantt"},"virtual-scroll":{"name":"VirtualScroll","category":"Gantt"},"loading-animation":{"name":"Loading Animation","category":"Gantt"},"local-data":{"name":"Local Data","category":"Data Binding"},"load-on-demand":{"name":"Load On Demand","category":"Data Binding"},"remote-data":{"name":"Remote Data","category":"Data Binding"},"self-reference-data":{"name":"Self Reference Data","category":"Data Binding"},"taskMode":{"name":"Task Scheduling Mode","category":"Scheduling Concepts"},"work-week":{"name":"Workweek","category":"Scheduling Concepts"},"defaultSample":"gantt/overview"},
"grid": {"overview":{"name":"Overview","category":"Data Grid"},"live-data":{"name":"Live Data","category":"Data Grid"},"adaptive-layout":{"name":"Adaptive Layout","category":"Data Grid"},"custom-binding":{"name":"Custom Binding","category":"Data Binding"},"column-template":{"name":"Column Template","category":"Columns"},"batch":{"name":"Batch Editing","category":"Editing"},"filter-menu":{"name":"Filter Menu","category":"Filtering"},"reactive-aggregate":{"name":"Reactive Aggregate","category":"Aggregates"},"advanced-exporting":{"name":"Advanced Exporting","category":"Exporting"},"keyboard-navigation":{"name":"Keyboard Navigation","category":"Miscellaneous"},"defaultSample":"grid/overview"},
"pdfviewer": {"default":{"name":"Default Functionalities","category":"PDF Viewer"},"read-only":{"name":"Read-Only","category":"Document Security"},"document-list":{"name":"Document List","category":"File Management"},"custom-toolbar":{"name":"Toolbar","category":"Customization"},"right-to-left":{"name":"Right To Left","category":"Localization"},"form-filling":{"name":"Form Filling","category":"PDF Form"},"form-designer":{"name":"Form Designer","category":"PDF Form"},"annotations":{"name":"Annotations","category":"Annotation"},"hand-written":{"name":"Handwritten Signature","category":"Signature"},"invisible-signature":{"name":"Invisible Signature","category":"Signature"},"defaultSample":"pdfviewer/default"},
"pivot-table": {"overview":{"name":"Overview","category":"Pivot Table"},"default":{"name":"Default Functionalities","category":"Pivot Table"},"live-data":{"name":"Live Data","category":"Pivot Table"},"local":{"name":"Local Data","category":"Data Binding"},"remote":{"name":"Remote Data","category":"Data Binding"},"server-side-engine":{"name":"Server-side Aggregation","category":"Data Binding"},"olap":{"name":"OLAP","category":"Data Binding"},"performance":{"name":"Performance","category":"Benchmark"},"pivot-chart":{"name":"Pivot Chart","category":"Integration"},"external-binding":{"name":"External Binding","category":"Integration"},"calculated-field":{"name":"Calculated Field","category":"Formula"},"defaultSample":"pivot-table/overview"},
"schedule": {"overview":{"name":"Overview","category":"Scheduler"},"default":{"name":"Default Functionalities","category":"Scheduler"},"local-data":{"name":"Local Data","category":"Data Binding"},"remote-data":{"name":"Remote Data","category":"Data Binding"},"calendar-integration":{"name":"Sync Google Calendar","category":"Appointments"},"realtime-binding":{"name":"Real-Time Binding","category":"Appointments"},"recurrence-events":{"name":"Recurring Events","category":"Appointments"},"block-events":{"name":"Blocking Dates and Time","category":"Appointments"},"search-events":{"name":"Search Events","category":"Appointments"},"timezone":{"name":"Timezone","category":"Appointments"},"external-drag-drop":{"name":"External Drag and Drop","category":"Appointments"},"multi-drag":{"name":"Multiple Events Drag","category":"Appointments"},"inline-editing":{"name":"Inline Editing","category":"Appointments"},"custom-month-view":{"name":"Custom Month View","category":"Views"},"defaultSample":"schedule/overview"},
"spreadsheet": {"default":{"name":"Default Functionalities","category":"Spreadsheet"},"formula":{"name":"Formula","category":"Spreadsheet"},"protect-sheet":{"name":"Protection","category":"Spreadsheet"},"freeze-pane":{"name":"Freeze Panes","category":"Spreadsheet"},"data-validation":{"name":"Data Validation","category":"Spreadsheet"},"hyperlink":{"name":"Hyperlink","category":"Spreadsheet"},"cell-data-binding":{"name":"Cell Data Binding","category":"Data Binding"},"remote-data-binding":{"name":"Remote Data Binding","category":"Data Binding"},"cell-formatting":{"name":"Cell Formatting","category":"Formatting"},"number-formatting":{"name":"Number Formatting","category":"Formatting"},"sorting-and-filtering":{"name":"Sorting and Filtering","category":"Data Analysis"},"defaultSample":"spreadsheet/default"},
"treegrid": {"treegrid-overview":{"name":"Overview","category":"Tree Grid"},"live-data":{"name":"Live Data","category":"Tree Grid"},"default":{"name":"Default Functionalities","category":"Tree Grid"},"adaptive":{"name":"Adaptive Layout ","category":"Tree Grid"},"loading-animation":{"name":"Loading Animation","category":"Tree Grid"},"localdata":{"name":"Local Data","category":"Data Binding"},"remote-data":{"name":"Remote Data","category":"Data Binding"},"selfreference":{"name":"Self Reference Data","category":"Data Binding"},"columntemplate":{"name":"Column Template","category":"Columns"},"header-template":{"name":"Header Template","category":"Columns"},"aggregate-default":{"name":"Default Aggregate","category":"Aggregates"},"defaultSample":"treegrid/treegrid-overview"}
}

export let apiList:any={"gantt/overview":[{"name":"dataSource","description":"<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"height","description":"<p>Defines the height of the Gantt component container.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"eventMarkers","description":"<p>Defines events and status of project throughout the timeline.</p>\n","type":"EventMarkerModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers"},{"name":"labelSettings","description":"<p>Defines the right, left and inner task labels in task bar.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/default":[{"name":"dataSource","description":"<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"height","description":"<p>Defines the height of the Gantt component container.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"eventMarkers","description":"<p>Defines events and status of project throughout the timeline.</p>\n","type":"EventMarkerModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers"},{"name":"labelSettings","description":"<p>Defines the right, left and inner task labels in task bar.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/editing":[{"name":"dataSource","description":"<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"dateFormat","description":"<p>Specifies the dateFormat for Gantt, given format is displayed in tooltip and Grid cells.\nBy default, the format is based on the culture.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#dateformat"},{"name":"height","description":"<p>Defines the height of the Gantt component container.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"editSettings","description":"<p>Configures edit settings of Gantt.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"columns","description":"<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"gridLines","description":"<p>Configures the grid lines in tree grid and gantt chart.\n@default 'Horizontal'</p>\n","type":"GridLine","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#gridlines"},{"name":"resourceFields","description":"<p>Defines mapping properties to find resource values such as id, name, unit and group from resource collection.</p>\n","type":"ResourceFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resourcefields"},{"name":"resources","description":"<p>Defines resource collection assigned for projects.</p>\n","type":"any[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#resources"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Defines the right, left and inner task labels in task bar.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"labelSettings","description":"<p>Defines the right, left and inner task labels in task bar.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"editDialogFields","description":"<p>Defines the tabs and fields to be included in the edit dialog.\nIf the value was empty, then it will be calculated from <code>taskSettings</code> and <code>columns</code> value.</p>\n","type":"EditDialogFieldSettingsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editdialogfields"},{"name":"eventMarkers","description":"<p>Defines events and status of project throughout the timeline.</p>\n","type":"EventMarkerModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#eventmarkers"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for Gantt.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"}],"gantt/virtual-scroll":[{"name":"dataSource","description":"<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"height","description":"<p>Defines the height of the Gantt component container.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"selectionSettings","description":"<p>Configures the selection settings.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#selectionsettings"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the Gantt will render only the rows visible within the view-port.\nand load subsequent rows on vertical scrolling. This helps to load large dataset in Gantt.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#enablevirtualization"}],"gantt/loading-animation":[{"name":"dataSource","description":"<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"height","description":"<p>Defines the height of the Gantt component container.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"selectionSettings","description":"<p>Configures the selection settings.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#selectionsettings"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the Gantt will render only the rows visible within the view-port.\nand load subsequent rows on vertical scrolling. This helps to load large dataset in Gantt.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#enablevirtualization"},{"name":"loadingIndicator","description":"<p>Configures the loading indicator of the Gantt Chart. Specifies whether to display spinner or shimmer effect during the waiting time on any actions performed in Gantt Chart.</p>\n","type":"LoadingIndicatorModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#loadingindicator"},{"name":"allowFiltering","description":"<p>Enables or disables filtering support in Gantt.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowfiltering"}],"gantt/local-data":[{"name":"dataSource","description":"<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"labelSettings","description":"<p>Defines the right, left and inner task labels in task bar.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for Gantt.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"}],"gantt/load-on-demand":[{"name":"dataSource","description":"<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"labelSettings","description":"<p>Defines the right, left and inner task labels in task bar.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for Gantt.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the Gantt will render only the rows visible within the view-port.\nand load subsequent rows on vertical scrolling. This helps to load large dataset in Gantt.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#enablevirtualization"},{"name":"loadChildOnDemand","description":"<p>Gets or sets whether to load child record on demand in remote data binding. Initially parent records are rendered in collapsed state.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#loadchildondemand"}],"gantt/remote-data":[{"name":"dataSource","description":"<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"gridLines","description":"<p>Configures the grid lines in tree grid and gantt chart.\n@default 'Horizontal'</p>\n","type":"GridLine","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#gridlines"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"timelineSettings","description":"<p>Configures timeline settings of Gantt.\nDefines default timeline modes or customized top tier mode and bottom tier mode or single tier only.</p>\n","type":"TimelineSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#timelinesettings"},{"name":"labelSettings","description":"<p>Defines the right, left and inner task labels in task bar.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"includeWeekend","description":"<p>Defines weekend days are considered as working day or not.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#includeweekend"},{"name":"projectStartDate","description":"<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"gantt/self-reference-data":[{"name":"dataSource","description":"<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"height","description":"<p>Defines the height of the Gantt component container.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"taskFields","description":"<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"columns","description":"<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"treeColumnIndex","description":"<p>To define expander column index in Grid.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#treecolumnindex"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"highlightWeekends","description":"<p>If <code>highlightWeekends</code> set to true, then all weekend days are highlighted in week - day timeline mode.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#highlightweekends"},{"name":"labelSettings","description":"<p>Defines the right, left and inner task labels in task bar.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"projectStartDate","description":"<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for Gantt.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"}],"gantt/taskMode":[{"name":"dataSource","description":"<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"height","description":"<p>Defines the height of the Gantt component container.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"projectStartDate","description":"<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of gantt chart tasks when column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowsorting"},{"name":"enableContextMenu","description":"<p>If <code>enableContextMenu</code> is set to true, Enable context menu in Gantt.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#enablecontextmenu"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the toolbar items of the Gantt.\nIt contains built-in and custom toolbar items\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Gantt's toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in toolbar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected task.</li>\n<li>Update: Updates the edited task.</li>\n<li>Delete: Deletes the selected task.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches tasks by the given key.</li>\n<li>ExpandAll: Expands all the task of Gantt.</li>\n<li>CollapseAll: Collapses all the task of Gantt.</li>\n<li>PrevTimeSpan: Extends timeline with one unit before the timeline start date.</li>\n<li>NextTimeSpan: Extends timeline with one unit after the timeline finish date.</li>\n<li>ZoomIn: ZoomIn the Gantt control.</li>\n<li>ZoomOut: ZoomOut the Gantt control.</li>\n<li>ZoomToFit: Display the all tasks within the viewable Gantt chart.</li>\n<li>ExcelExport: To export in Excel format.</li>\n<li>CsvExport : To export in CSV format.</li>\n<li>Indent: To indent a task to one level.</li>\n<li>Outdent: To outdent a task from one level.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#toolbar"},{"name":"columns","description":"<p>Defines column collection displayed in grid\nIf the <code>columns</code> declaration was empty then <code>columns</code> are automatically populated from <code>taskSettings</code> value.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#columns"},{"name":"validateManualTasksOnLinking","description":"<p>If <code>validateManualTasksOnLinking</code> is set to true,\nit enables date validation while connecting manually scheduled tasks with predecessor</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#validatemanualtasksonlinking"},{"name":"editSettings","description":"<p>Configures edit settings of Gantt.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#editsettings"},{"name":"labelSettings","description":"<p>Defines the right, left and inner task labels in task bar.</p>\n","type":"LabelSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#labelsettings"},{"name":"splitterSettings","description":"<p>Configures the splitter settings for Gantt.</p>\n","type":"SplitterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#splittersettings"},{"name":"taskMode","description":"<p>Specifies task schedule mode for a project.</p>\n","type":"ScheduleMode","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskmode"}],"gantt/work-week":[{"name":"dataSource","description":"<p>It is used to render Gantt chart rows and tasks.\n<code>dataSource</code> value was defined as array of JavaScript objects or instances of <code>DataManager</code>.</p>\n","type":"Object[]|DataManager|Object","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#datasource"},{"name":"taskFields","description":"<p>Defines mapping properties to find task values such as id, start date, end date, duration and progress values from data source.</p>\n","type":"TaskFieldsModel","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#taskfields"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Gantt chart rows by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#allowselection"},{"name":"height","description":"<p>Defines the height of the Gantt component container.</p>\n","type":"number|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#height"},{"name":"workWeek","description":"<p>Defines workweek of project.</p>\n","type":"string[]","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#workweek"},{"name":"projectStartDate","description":"<p>Defines start date of the project, if <code>projectStartDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectstartdate"},{"name":"projectEndDate","description":"<p>Defines end date of the project, if <code>projectEndDate</code> value not set then it will be calculated from data source.</p>\n","type":"Date|string","link":"//ej2.syncfusion.com/react/documentation/api/gantt/#projectenddate"}],"grid/overview":[{"name":"queryCellInfo","description":"<p>Triggered every time a request is made to access cell information, element, or data.\nThis will be triggered before the cell element is appended to the Grid element.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#querycellinfo"},{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the Grid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablevirtualization"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowselection"},{"name":"selectionSettings","description":"<p>Configures the selection settings.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#selectionsettings"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"dataBound","description":"<p>Triggers when data source is populated in the Grid.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#databound"},{"name":"actionComplete","description":"<p>Triggers when Grid actions such as sorting, filtering, paging, grouping etc. are completed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#actioncomplete"},{"name":"load","description":"<p>This event allows customization of Grid properties before rendering.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#load"}],"grid/live-data":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the Grid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablevirtualization"},{"name":"enableVirtualMaskRow","description":"<p>Specifies the shimmer effect for Grid virtual and infinite scrolling.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablevirtualmaskrow"},{"name":"enableHover","description":"<p>If <code>enableHover</code> is set to true, the row hover is enabled in the Grid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#enablehover"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"rowHeight","description":"<p>Defines the height of Grid rows.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#rowheight"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) Grid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowselection"},{"name":"queryCellInfo","description":"<p>Triggered every time a request is made to access cell information, element, or data.\nThis will be triggered before the cell element is appended to the Grid element.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#querycellinfo"},{"name":"load","description":"<p>This event allows customization of Grid properties before rendering.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/grid/#load"}],"grid/adaptive-layout":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#editsettings"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"filterSettings","description":"<p>Configures the filter settings of the Grid.</p>\n","type":"FilterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#filtersettings"},{"name":"rowRenderingMode","description":"<p>Defines the grid row elements rendering direction. The available directions are,</p>\n<ul>\n<li><code>Horizontal</code>: Renders the grid row elements in the horizontal direction</li>\n<li><code>Vertical</code>: Renders the grid row elements in the vertical direction</li>\n</ul>\n","type":"RowRenderingDirection","link":"//ej2.syncfusion.com/react/documentation/api/grid/#rowrenderingmode"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"}],"grid/custom-binding":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"allowGrouping","description":"<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping"}],"grid/column-template":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"width","description":"<p>Defines the Grid width.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#width"},{"name":"height","description":"<p>Defines the scrollable height of the grid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/grid/#height"}],"grid/batch":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#editsettings"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"}],"grid/filter-menu":[{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"filterSettings","description":"<p>Configures the filter settings of the Grid.</p>\n","type":"FilterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#filtersettings"},{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/reactive-aggregate":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/advanced-exporting":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowExcelExport","description":"<p>If <code>allowExcelExport</code> set to true, then it will allow the user to export grid to Excel file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/excel-exporting/\"><code>ExcelExport</code></a> to configure exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowexcelexport"},{"name":"allowPdfExport","description":"<p>If <code>allowPdfExport</code> set to true, then it will allow the user to export grid to Pdf file.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/pdf-export/\"><code>Pdfexport</code></a> to configure the exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpdfexport"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"}],"grid/keyboard-navigation":[{"name":"dataSource","description":"<p>It is used to render grid table rows.\nIf the <code>dataSource</code> is an array of JavaScript objects,\nthen Grid will create instance of <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>\nfrom this <code>dataSource</code>.\nIf the <code>dataSource</code> is an existing <a href=\"https://ej2.syncfusion.com/documentation/api/data/dataManager/\"><code>DataManager</code></a>,\nthe Grid will not initialize a new one.</p>\n<blockquote>\n<p>Check the available <a href=\"../../data/adaptors/\"><code>Adaptors</code></a> to customize the data operation.</p>\n</blockquote>\n","type":"Object|DataManager|DataResult","link":"//ej2.syncfusion.com/react/documentation/api/grid/#datasource"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter grid records with required criteria.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/filtering/\"><code>Filtering</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowfiltering"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"Column[]|string[]|ColumnModel[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#columns"},{"name":"allowGrouping","description":"<p>If <code>allowGrouping</code> set to true, then it will allow the user to dynamically group or ungroup columns.\nGrouping can be done by drag and drop columns from column header to group drop area.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/grouping/\"><code>Grouping</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowgrouping"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, the pager renders at the footer of the Grid. It is used to handle page navigation in the Grid.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/paging/\"><code>Paging</code></a> to configure the grid pager.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowpaging"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of grid records when column header is clicked.</p>\n<blockquote>\n<p>Check the <a href=\"../../grid/sorting/\"><code>Sorting</code></a> to customize its default behavior.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/grid/#allowsorting"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the Grid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole Grid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the Grid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Add: Adds a new record.</li>\n<li>Edit: Edits the selected record.</li>\n<li>Update: Updates the edited record.</li>\n<li>Delete: Deletes the selected record.</li>\n<li>Cancel: Cancels the edit state.</li>\n<li>Search: Searches records by the given key.</li>\n<li>Print: Prints the Grid.</li>\n<li>ExcelExport - Export the Grid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the Grid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the Grid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n<blockquote>\n<p>Check the <a href=\"../../grid/tool-bar/#custom-toolbar-items/\"><code>Toolbar</code></a> to customize its default items.</p>\n</blockquote>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/grid/#toolbar"},{"name":"filterSettings","description":"<p>Configures the filter settings of the Grid.</p>\n","type":"FilterSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#filtersettings"},{"name":"pageSettings","description":"<p>Configures the pager in the Grid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#pagesettings"},{"name":"editSettings","description":"<p>Configures the edit settings.</p>\n","type":"EditSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/grid/#editsettings"}],"pdfviewer/default":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"}],"pdfviewer/read-only":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"pdfviewer/document-list":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"}],"pdfviewer/custom-toolbar":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"},{"name":"pageChange","description":"<p>Triggers when there is change in current page number.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#pagechange"},{"name":"enableToolbar","description":"<p>Enable or disables the toolbar of PdfViewer.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#enabletoolbar"}],"pdfviewer/right-to-left":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"enableRtl","description":"<p>Enable or disable rendering component in right to left direction.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#enablertl"}],"pdfviewer/form-filling":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"}],"pdfviewer/form-designer":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"pdfviewer/annotations":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"pdfviewer/hand-written":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"pdfviewer/invisible-signature":[{"name":"serviceUrl","description":"<p>Defines the service url of the PdfViewer control.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#serviceurl"},{"name":"documentPath","description":"<p>Sets the PDF document path for initial loading.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentpath"},{"name":"documentLoad","description":"<p>Triggers while loading document into PDF viewer.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/pdfviewer/#documentload"}],"schedule/overview":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"cssClass","description":"<p>It is used to customize the Schedule which accepts custom CSS class names that defines specific user-defined styles and themes\nto be applied on the Schedule element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#cssclass"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"timezone","description":"<p>Schedule will be assigned with specific timezone, so as to display the events in it accordingly. By default,\nSchedule dates are processed with System timezone, as no timezone will be assigned specifically to the Schedule at the initial time.\nWhenever the Schedule is bound to remote data services, it is always recommended to set specific timezone to Schedule to make the\nevents on it to display on the same time irrespective of the system timezone. It usually accepts\nthe valid <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">IANA</a> timezone names.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#timezone"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"},{"name":"dateHeaderTemplate","description":"<p>It accepts either the string or HTMLElement as template design content and parse it appropriately before displaying it onto\nthe date header cells. The field that can be accessed via this template is <code>date</code>.</p>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#dateheadertemplate"},{"name":"timeScale","description":"<p>Allows to set different time duration on Schedule along with the customized grid count. It also has template option to\ncustomize the time slots with required time values in its own format.</p>\n","type":"TimeScaleModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#timescale"},{"name":"rowAutoHeight","description":"<p>when set to <code>true</code>, allows the height of the work-cells to adjust automatically\nbased on the number of appointments present in those time ranges.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#rowautoheight"}],"schedule/default":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/local-data":[{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/remote-data":[{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/calendar-integration":[{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"dataBinding","description":"<p>Triggers before the data binds to the scheduler.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#databinding"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/realtime-binding":[{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"dataBinding","description":"<p>Triggers before the data binds to the scheduler.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#databinding"}],"schedule/recurrence-events":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"}],"schedule/block-events":[{"name":"width","description":"<p>Sets the <code>width</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string value can be either pixel or percentage format.\nWhen set to <code>auto</code>, the Schedule width gets auto-adjusted and display its content related to the viewable screen size.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#width"},{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"}],"schedule/search-events":[{"name":"height","description":"<p>Sets the <code>height</code> of the Schedule component, accepting both string and number values.</p>\n<p>The string type includes either pixel or percentage values.\nWhen <code>height</code> is set with specific pixel value, then the Schedule will be rendered to that specified space.\nIn case, if <code>auto</code> value is set, then the height of the Schedule gets auto-adjusted within the given container.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#height"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"}],"schedule/timezone":[{"name":"timezone","description":"<p>Schedule will be assigned with specific timezone, so as to display the events in it accordingly. By default,\nSchedule dates are processed with System timezone, as no timezone will be assigned specifically to the Schedule at the initial time.\nWhenever the Schedule is bound to remote data services, it is always recommended to set specific timezone to Schedule to make the\nevents on it to display on the same time irrespective of the system timezone. It usually accepts\nthe valid <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">IANA</a> timezone names.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#timezone"},{"name":"selectedDate","description":"<p>To mark the active (current) date on the Schedule, <code>selectedDate</code> property can be defined.\nUsually, it defaults to the current System date.</p>\n","type":"Date","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#selecteddate"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"eventRendered","description":"<p>Triggers before each of the event getting rendered on the scheduler user interface.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventrendered"}],"schedule/external-drag-drop":[{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"resourceHeaderTemplate","description":"<p>Template option to customize the resource header bar. Here, the template accepts either\nthe string or HTMLElement as template design and then the parsed design is displayed onto the resource header cells.\nThe following can be accessible via template.</p>\n<ul>\n<li><code>resource</code> - All the resource fields.</li>\n<li><code>resourceData</code> - Object collection of current resource.\nRefer to the below code snippet.</li>\n</ul>\n","type":"string|Function","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resourceheadertemplate"},{"name":"cssClass","description":"<p>It is used to customize the Schedule which accepts custom CSS class names that defines specific user-defined styles and themes\nto be applied on the Schedule element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#cssclass"},{"name":"workHours","description":"<p>The working hours should be highlighted on Schedule with different color shade and an additional option must be provided to\nhighlight it or not. This functionality is handled through <code>workHours</code> property and the start work hour should be 9 AM by default\nand end work hour should point to 6 PM. The start and end working hours needs to be provided as Time value of short skeleton type.</p>\n","type":"WorkHoursModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#workhours"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"},{"name":"actionBegin","description":"<p>Triggers on beginning of every scheduler action.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#actionbegin"},{"name":"drag","description":"<p>Triggers when an appointment is being in a dragged state.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#drag"}],"schedule/multi-drag":[{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"allowMultiDrag","description":"<p>This property helps to drag the multiple selected events. By default, it is set to <code>false</code>.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#allowmultidrag"},{"name":"cssClass","description":"<p>It is used to customize the Schedule which accepts custom CSS class names that defines specific user-defined styles and themes\nto be applied on the Schedule element.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#cssclass"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"resources","description":"<p>Allows defining the collection of resources to be displayed on the Schedule. The resource collection needs to be defined\nwith unique resource names to identify it along with the respective dataSource and field mapping options.</p>\n","type":"ResourcesModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#resources"}],"schedule/inline-editing":[{"name":"currentView","description":"<p>To set the active view on scheduler, the <code>currentView</code> property can be used and it usually accepts either of the following available\nview options. The view option specified in this property will be initially loaded on the schedule.</p>\n<ul>\n<li><code>Day</code>: Denotes Day view of the scheduler.</li>\n<li><code>Week</code>: Denotes Week view of the scheduler.</li>\n<li><code>WorkWeek</code>: Denotes Work Week view of the scheduler.</li>\n<li><code>Month</code>: Denotes Month view of the scheduler.</li>\n<li><code>Year</code>: Denotes Year view of the scheduler.</li>\n<li><code>Agenda</code>: Denotes Agenda view of the scheduler.</li>\n<li><code>MonthAgenda</code>: Denotes Month Agenda view of the scheduler.</li>\n<li><code>TimelineDay</code>: Denotes Timeline Day view of the scheduler.</li>\n<li><code>TimelineWeek</code>: Denotes Timeline Week view of the scheduler.</li>\n<li><code>TimelineWorkWeek</code>: Denotes Timeline Work Week view of the scheduler.</li>\n<li><code>TimelineMonth</code>: Denotes Timeline Month view of the scheduler.</li>\n<li><code>TimelineYear</code>: Denotes Timeline Year view of the scheduler.</li>\n</ul>\n","type":"View","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#currentview"},{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"group","description":"<p>Allows defining the group related settings of multiple resources. When this property is non-empty, it means\nthat the resources will be grouped on the schedule layout based on the provided resource names.</p>\n","type":"GroupModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#group"},{"name":"allowInline","description":"<p>This property helps user to add/edit the event in inline. By default, it is set to <code>false</code>.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#allowinline"}],"schedule/custom-month-view":[{"name":"eventSettings","description":"<p>Complete set of settings related to Schedule events to bind it to local or remote dataSource, map applicable database fields and\nother validation to be carried out on the available fields.</p>\n","type":"EventSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#eventsettings"},{"name":"views","description":"<p>This property holds the views collection and its configurations. It accepts either the array of view names or the array of view\nobjects that holds different configurations for each views. By default,\nSchedule displays all the views namely <code>Day</code>, <code>Week</code>, <code>Work Week</code>, <code>Month</code> and <code>Agenda</code>.\nExample for array of views:</p>\n<p>Example for array of view objects:</p>\n","type":"View[]|ViewsModel[]","link":"//ej2.syncfusion.com/react/documentation/api/schedule/#views"}],"spreadsheet/default":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"openUrl","description":"<p>Specifies the service URL to open excel file in spreadsheet.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#openurl"},{"name":"saveUrl","description":"<p>Specifies the service URL to save spreadsheet as Excel file.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#saveurl"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#created"}],"spreadsheet/formula":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"showRibbon","description":"<p>It shows or hides the ribbon in spreadsheet.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#showribbon"},{"name":"definedNames","description":"<p>Specifies the name of a range and uses it in a formula for calculation.</p>\n","type":"DefineNameModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#definednames"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#created"}],"spreadsheet/protect-sheet":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"beforeCellRender","description":"<p>Triggers before the cell appended to the DOM.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#beforecellrender"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#created"}],"spreadsheet/cell-data-binding":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"showFormulaBar","description":"<p>It shows or hides the formula bar and its features.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#showformulabar"},{"name":"showRibbon","description":"<p>It shows or hides the ribbon in spreadsheet.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#showribbon"}],"spreadsheet/remote-data-binding":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"showFormulaBar","description":"<p>It shows or hides the formula bar and its features.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#showformulabar"},{"name":"showRibbon","description":"<p>It shows or hides the ribbon in spreadsheet.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#showribbon"}],"spreadsheet/sorting-and-filtering":[{"name":"sheets","description":"<p>Configures sheets and its options.</p>\n","type":"SheetModel[]","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#sheets"},{"name":"created","description":"<p>Triggers when the component is created.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/spreadsheet/#created"}],"treegrid/treegrid-overview":[{"name":"queryCellInfo","description":"<p>Triggered every time a request is made to access cell information, element, or data.\nThis will be triggered before the cell element is appended to the TreeGrid element.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#querycellinfo"},{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the TreeGrid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in TreeGrid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#enablevirtualization"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> is set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter tree grid records with required criteria.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowfiltering"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) TreeGrid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowselection"},{"name":"selectionSettings","description":"<p>Configures the selection settings.</p>\n","type":"SelectionSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#selectionsettings"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"dataBound","description":"<p>Triggers when data source is populated in the TreeGrid.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#databound"},{"name":"actionComplete","description":"<p>Triggers when TreeGrid actions such as sorting, filtering, paging etc. are completed.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#actioncomplete"},{"name":"load","description":"<p>This event allows customization of TreeGrid properties before rendering.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#load"}],"treegrid/live-data":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"enableVirtualization","description":"<p>If <code>enableVirtualization</code> set to true, then the TreeGrid will render only the rows visible within the view-port\nand load subsequent rows on vertical scrolling. This helps to load large dataset in TreeGrid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#enablevirtualization"},{"name":"enableVirtualMaskRow","description":"<p>Specifies whether to display shimmer effect during scrolling action in virtual scrolling feature.\nIf disabled, spinner is shown instead of shimmer effect.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#enablevirtualmaskrow"},{"name":"enableHover","description":"<p>If <code>enableHover</code> is set to true, the row hover is enabled in the TreeGrid.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#enablehover"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"rowHeight","description":"<p>Defines the height of TreeGrid rows.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#rowheight"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"},{"name":"allowSelection","description":"<p>If <code>allowSelection</code> is set to true, it allows selection of (highlight row) TreeGrid records by clicking it.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowselection"},{"name":"queryCellInfo","description":"<p>Triggered every time a request is made to access cell information, element, or data.\nThis will be triggered before the cell element is appended to the TreeGrid element.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#querycellinfo"},{"name":"load","description":"<p>This event allows customization of TreeGrid properties before rendering.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#load"}],"treegrid/default":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/adaptive":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"enableAdaptiveUI","description":"<p>If <code>enableAdaptiveUI</code> is set to true, the pop-up UI will become adaptive to small screens,\nand be used for filtering and other features.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#enableadaptiveui"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> is set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter tree grid records with required criteria.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowfiltering"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"}],"treegrid/loading-animation":[{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"allowSorting","description":"<p>If <code>allowSorting</code> is set to true, it allows sorting of treegrid records when column header is clicked.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowsorting"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"allowFiltering","description":"<p>If <code>allowFiltering</code> is set to true the filter bar will be displayed.\nIf set to false the filter bar will not be displayed.\nFilter bar allows the user to filter tree grid records with required criteria.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowfiltering"},{"name":"loadingIndicator","description":"<p>Configures the loading indicator of the Tree Grid. Specifies whether to display spinner or shimmer effect\nduring the waiting time on any actions (paging, sorting, filtering, CRUD operations) performed in Tree Grid.</p>\n","type":"LoadingIndicatorModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#loadingindicator"},{"name":"pageSettings","description":"<p>Configures the pager in the TreeGrid.</p>\n","type":"PageSettingsModel","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#pagesettings"}],"treegrid/localdata":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/remote-data":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"hasChildMapping","description":"<p>Specifies whether record is parent or not for the remote data binding</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#haschildmapping"},{"name":"parentIdMapping","description":"<p>Specifies the name of the field in the dataSource, which contains the parent’s id</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#parentidmapping"},{"name":"idMapping","description":"<p>Specifies the name of the field in the dataSource, which contains the id of that row.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#idmapping"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"}],"treegrid/selfreference":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"idMapping","description":"<p>Specifies the name of the field in the dataSource, which contains the id of that row.</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#idmapping"},{"name":"parentIdMapping","description":"<p>Specifies the name of the field in the dataSource, which contains the parent’s id</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#parentidmapping"}],"treegrid/columntemplate":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"width","description":"<p>Defines the TreeGrid width.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#width"},{"name":"height","description":"<p>Defines the scrollable height of the TreeGrid content.</p>\n","type":"string|number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#height"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"rowHeight","description":"<p>Defines the height of TreeGrid rows.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#rowheight"}],"treegrid/header-template":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"allowPaging","description":"<p>If <code>allowPaging</code> is set to true, pager renders.</p>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpaging"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"}],"treegrid/aggregate-default":[{"name":"dataSource","description":"<p>It is used to render TreeGrid table rows.</p>\n","type":"Object|DataManager","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#datasource"},{"name":"childMapping","description":"<p>Specifies the mapping property path for child records in data source</p>\n","type":"string","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#childmapping"},{"name":"columns","description":"<p>Defines the schema of dataSource.\nIf the <code>columns</code> declaration is empty or undefined then the <code>columns</code> are automatically generated from data source.</p>\n","type":"ColumnModel[]|string[]|Column[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#columns"},{"name":"aggregates","description":"<p>Configures the TreeGrid aggregate rows.</p>\n<blockquote>\n<p>Check the <a href=\"../../treegrid/aggregates/aggregates\"><code>Aggregates</code></a> for its configuration.</p>\n</blockquote>\n","type":"AggregateRowModel[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#aggregates"},{"name":"treeColumnIndex","description":"<p>Specifies the index of the column that needs to have the expander button.</p>\n","type":"number","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#treecolumnindex"},{"name":"toolbar","description":"<p><code>toolbar</code> defines the ToolBar items of the TreeGrid.\nIt contains built-in and custom toolbar items.\nIf a string value is assigned to the <code>toolbar</code> option, it is considered as the template for the whole TreeGrid ToolBar.\nIf an array value is assigned, it is considered as the list of built-in and custom toolbar items in the TreeGrid's Toolbar.\n&lt;br&gt;&lt;br&gt;\nThe available built-in ToolBar items are:</p>\n<ul>\n<li>Search: Searches records by the given key.</li>\n<li>ExpandAll: Expands all the rows in TreeGrid</li>\n<li>CollapseAll: Collapses all the rows in TreeGrid</li>\n<li>ExcelExport - Export the TreeGrid to Excel(excelExport() method manually to make export.)</li>\n<li>PdfExport - Export the TreeGrid to PDF(pdfExport() method manually to make export.)</li>\n<li>CsvExport - Export the TreeGrid to CSV(csvExport() method manually to make export.)&lt;br&gt;&lt;br&gt;\nThe following code example implements the custom toolbar items.</li>\n</ul>\n","type":"[]","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbar"},{"name":"toolbarClick","description":"<p>Triggers when toolbar item is clicked.</p>\n","type":"Event","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#toolbarclick"},{"name":"allowPdfExport","description":"<p>If <code>allowPdfExport</code> set to true, then it will allow the user to export treegrid to Pdf file.</p>\n<blockquote>\n<p>Check the <a href=\"../../treegrid/pdf-export/\"><code>Pdfexport</code></a> to configure the exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowpdfexport"},{"name":"allowExcelExport","description":"<p>If <code>allowExcelExport</code> set to true, then it will allow the user to export treegrid to Excel file.</p>\n<blockquote>\n<p>Check the <a href=\"../../treegrid/excel-export/\"><code>ExcelExport</code></a> to configure exporting document.</p>\n</blockquote>\n","type":"boolean","link":"//ej2.syncfusion.com/react/documentation/api/treegrid/#allowexcelexport"}]}